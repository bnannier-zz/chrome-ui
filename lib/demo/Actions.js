'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INVALIDATE_SUBREDDIT = exports.SELECT_SUBREDDIT = exports.RECEIVE_POSTS = exports.REQUEST_POSTS = undefined;
exports.selectSubreddit = selectSubreddit;
exports.invalidateSubreddit = invalidateSubreddit;
exports.fetchPostsIfNeeded = fetchPostsIfNeeded;

var _crossFetch = require('cross-fetch');

var _crossFetch2 = _interopRequireDefault(_crossFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REQUEST_POSTS = exports.REQUEST_POSTS = 'REQUEST_POSTS';
var RECEIVE_POSTS = exports.RECEIVE_POSTS = 'RECEIVE_POSTS';
var SELECT_SUBREDDIT = exports.SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';
var INVALIDATE_SUBREDDIT = exports.INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';

function selectSubreddit(subreddit) {
    return {
        type: SELECT_SUBREDDIT,
        subreddit: subreddit
    };
}

function invalidateSubreddit(subreddit) {
    return {
        type: INVALIDATE_SUBREDDIT,
        subreddit: subreddit
    };
}

function requestPosts(subreddit) {
    return {
        type: REQUEST_POSTS,
        subreddit: subreddit
    };
}

function receivePosts(subreddit, json) {
    return {
        type: RECEIVE_POSTS,
        subreddit: subreddit,
        posts: json.data.children.map(function (child) {
            return child.data;
        }),
        receivedAt: Date.now()
    };
}

function fetchPosts(subreddit) {
    return function (dispatch) {
        dispatch(requestPosts(subreddit));
        return (0, _crossFetch2.default)('https://www.reddit.com/r/' + subreddit + '.json').then(function (response) {
            return response.json();
        }).then(function (json) {
            return dispatch(receivePosts(subreddit, json));
        });
    };
}

function shouldFetchPosts(state, subreddit) {
    var posts = state.postsBySubreddit[subreddit];
    if (!posts) {
        return true;
    } else if (posts.isFetching) {
        return false;
    } else {
        return posts.didInvalidate;
    }
}

function fetchPostsIfNeeded(subreddit) {
    return function (dispatch, getState) {
        if (shouldFetchPosts(getState(), subreddit)) {
            return dispatch(fetchPosts(subreddit));
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZW1vL0FjdGlvbnMuanMiXSwibmFtZXMiOlsic2VsZWN0U3VicmVkZGl0IiwiaW52YWxpZGF0ZVN1YnJlZGRpdCIsImZldGNoUG9zdHNJZk5lZWRlZCIsIlJFUVVFU1RfUE9TVFMiLCJSRUNFSVZFX1BPU1RTIiwiU0VMRUNUX1NVQlJFRERJVCIsIklOVkFMSURBVEVfU1VCUkVERElUIiwic3VicmVkZGl0IiwidHlwZSIsInJlcXVlc3RQb3N0cyIsInJlY2VpdmVQb3N0cyIsImpzb24iLCJwb3N0cyIsImRhdGEiLCJjaGlsZHJlbiIsIm1hcCIsImNoaWxkIiwicmVjZWl2ZWRBdCIsIkRhdGUiLCJub3ciLCJmZXRjaFBvc3RzIiwiZGlzcGF0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJzaG91bGRGZXRjaFBvc3RzIiwic3RhdGUiLCJwb3N0c0J5U3VicmVkZGl0IiwiaXNGZXRjaGluZyIsImRpZEludmFsaWRhdGUiLCJnZXRTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBT2dCQSxlLEdBQUFBLGU7UUFPQUMsbUIsR0FBQUEsbUI7UUEyQ0FDLGtCLEdBQUFBLGtCOztBQXpEaEI7Ozs7OztBQUVPLElBQU1DLHdDQUFnQixlQUF0QjtBQUNBLElBQU1DLHdDQUFnQixlQUF0QjtBQUNBLElBQU1DLDhDQUFtQixrQkFBekI7QUFDQSxJQUFNQyxzREFBdUIsc0JBQTdCOztBQUVBLFNBQVNOLGVBQVQsQ0FBeUJPLFNBQXpCLEVBQW9DO0FBQ3ZDLFdBQU87QUFDSEMsY0FBTUgsZ0JBREg7QUFFSEU7QUFGRyxLQUFQO0FBSUg7O0FBRU0sU0FBU04sbUJBQVQsQ0FBNkJNLFNBQTdCLEVBQXdDO0FBQzNDLFdBQU87QUFDSEMsY0FBTUYsb0JBREg7QUFFSEM7QUFGRyxLQUFQO0FBSUg7O0FBRUQsU0FBU0UsWUFBVCxDQUFzQkYsU0FBdEIsRUFBaUM7QUFDN0IsV0FBTztBQUNIQyxjQUFNTCxhQURIO0FBRUhJO0FBRkcsS0FBUDtBQUlIOztBQUVELFNBQVNHLFlBQVQsQ0FBc0JILFNBQXRCLEVBQWlDSSxJQUFqQyxFQUF1QztBQUNuQyxXQUFPO0FBQ0hILGNBQU1KLGFBREg7QUFFSEcsNEJBRkc7QUFHSEssZUFBT0QsS0FBS0UsSUFBTCxDQUFVQyxRQUFWLENBQW1CQyxHQUFuQixDQUF1QjtBQUFBLG1CQUFTQyxNQUFNSCxJQUFmO0FBQUEsU0FBdkIsQ0FISjtBQUlISSxvQkFBWUMsS0FBS0MsR0FBTDtBQUpULEtBQVA7QUFNSDs7QUFFRCxTQUFTQyxVQUFULENBQW9CYixTQUFwQixFQUErQjtBQUMzQixXQUFPLG9CQUFZO0FBQ2ZjLGlCQUFTWixhQUFhRixTQUFiLENBQVQ7QUFDQSxlQUFPLHdEQUFrQ0EsU0FBbEMsWUFDRmUsSUFERSxDQUNHO0FBQUEsbUJBQVlDLFNBQVNaLElBQVQsRUFBWjtBQUFBLFNBREgsRUFFRlcsSUFGRSxDQUVHO0FBQUEsbUJBQVFELFNBQVNYLGFBQWFILFNBQWIsRUFBd0JJLElBQXhCLENBQVQsQ0FBUjtBQUFBLFNBRkgsQ0FBUDtBQUdILEtBTEQ7QUFNSDs7QUFFRCxTQUFTYSxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNsQixTQUFqQyxFQUE0QztBQUN4QyxRQUFNSyxRQUFRYSxNQUFNQyxnQkFBTixDQUF1Qm5CLFNBQXZCLENBQWQ7QUFDQSxRQUFJLENBQUNLLEtBQUwsRUFBWTtBQUNSLGVBQU8sSUFBUDtBQUNILEtBRkQsTUFFTyxJQUFJQSxNQUFNZSxVQUFWLEVBQXNCO0FBQ3pCLGVBQU8sS0FBUDtBQUNILEtBRk0sTUFFQTtBQUNILGVBQU9mLE1BQU1nQixhQUFiO0FBQ0g7QUFDSjs7QUFFTSxTQUFTMUIsa0JBQVQsQ0FBNEJLLFNBQTVCLEVBQXVDO0FBQzFDLFdBQU8sVUFBQ2MsUUFBRCxFQUFXUSxRQUFYLEVBQXdCO0FBQzNCLFlBQUlMLGlCQUFpQkssVUFBakIsRUFBNkJ0QixTQUE3QixDQUFKLEVBQTZDO0FBQ3pDLG1CQUFPYyxTQUFTRCxXQUFXYixTQUFYLENBQVQsQ0FBUDtBQUNIO0FBQ0osS0FKRDtBQUtIIiwiZmlsZSI6IkFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmV0Y2ggZnJvbSAnY3Jvc3MtZmV0Y2gnXG5cbmV4cG9ydCBjb25zdCBSRVFVRVNUX1BPU1RTID0gJ1JFUVVFU1RfUE9TVFMnXG5leHBvcnQgY29uc3QgUkVDRUlWRV9QT1NUUyA9ICdSRUNFSVZFX1BPU1RTJ1xuZXhwb3J0IGNvbnN0IFNFTEVDVF9TVUJSRURESVQgPSAnU0VMRUNUX1NVQlJFRERJVCdcbmV4cG9ydCBjb25zdCBJTlZBTElEQVRFX1NVQlJFRERJVCA9ICdJTlZBTElEQVRFX1NVQlJFRERJVCdcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFN1YnJlZGRpdChzdWJyZWRkaXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBTRUxFQ1RfU1VCUkVERElULFxuICAgICAgICBzdWJyZWRkaXRcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZVN1YnJlZGRpdChzdWJyZWRkaXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBJTlZBTElEQVRFX1NVQlJFRERJVCxcbiAgICAgICAgc3VicmVkZGl0XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdFBvc3RzKHN1YnJlZGRpdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJFUVVFU1RfUE9TVFMsXG4gICAgICAgIHN1YnJlZGRpdFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHJlY2VpdmVQb3N0cyhzdWJyZWRkaXQsIGpzb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSRUNFSVZFX1BPU1RTLFxuICAgICAgICBzdWJyZWRkaXQsXG4gICAgICAgIHBvc3RzOiBqc29uLmRhdGEuY2hpbGRyZW4ubWFwKGNoaWxkID0+IGNoaWxkLmRhdGEpLFxuICAgICAgICByZWNlaXZlZEF0OiBEYXRlLm5vdygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hQb3N0cyhzdWJyZWRkaXQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgICAgICBkaXNwYXRjaChyZXF1ZXN0UG9zdHMoc3VicmVkZGl0KSlcbiAgICAgICAgcmV0dXJuIGZldGNoKGBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvJHtzdWJyZWRkaXR9Lmpzb25gKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oanNvbiA9PiBkaXNwYXRjaChyZWNlaXZlUG9zdHMoc3VicmVkZGl0LCBqc29uKSkpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoUG9zdHMoc3RhdGUsIHN1YnJlZGRpdCkge1xuICAgIGNvbnN0IHBvc3RzID0gc3RhdGUucG9zdHNCeVN1YnJlZGRpdFtzdWJyZWRkaXRdO1xuICAgIGlmICghcG9zdHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChwb3N0cy5pc0ZldGNoaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcG9zdHMuZGlkSW52YWxpZGF0ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFBvc3RzSWZOZWVkZWQoc3VicmVkZGl0KSB7XG4gICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEZldGNoUG9zdHMoZ2V0U3RhdGUoKSwgc3VicmVkZGl0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGZldGNoUG9zdHMoc3VicmVkZGl0KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=